const express = require("express");
const bodyParser = require("body-parser");
const multer = require("multer");
const path = require("path");
const app = express();

// Set up storage for uploaded files
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, "public/uploads/");
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + "-" + file.originalname);
  },
});

const upload = multer({ storage });

// Set up EJS as the templating engine
app.set("view engine", "ejs");
app.set("views", path.join(__dirname, "views"));

// Serve static files
app.use(express.static("public"));
app.use(bodyParser.urlencoded({ extended: true }));

// In-memory storage for users and poems
let users = [];
let poems = [];

// Homepage
app.get("/", (req, res) => {
  res.render("index", { poems });
});

// Publish a poem
app.get("/publish", (req, res) => {
  res.render("publish");
});

app.post("/publish", upload.single("poemFile"), (req, res) => {
  const { title, author } = req.body;
  const file = req.file;

  if (title && author && file) {
    poems.push({
      id: Date.now(),
      title,
      author,
      file: `/uploads/${file.filename}`,
    });
    res.redirect("/");
  } else {
    res.status(400).send("All fields are required.");
  }
});

// View a profile
app.get("/profile/:author", (req, res) => {
  const author = req.params.author;
  const userPoems = poems.filter((poem) => poem.author === author);
  res.render("profile", { author, poems: userPoems });
});

// Start the server
const PORT = 3000;
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});